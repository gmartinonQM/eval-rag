import os
from typing import Any, Dict

from dotenv import load_dotenv
from langfuse import Langfuse
from langfuse.callback import CallbackHandler


class LangfuseUtils:
    _instance = None
    _langfuse: Langfuse = None

    def __new__(
        cls: type["LangfuseUtils"],
        *args: tuple[Any, ...],
        **kwargs: dict[str, Any],
    ) -> "LangfuseUtils":
        if cls._instance is None:
            cls._instance = super().__new__(cls)  # Create the single instance
            load_dotenv()  # Load environment variables once
            cls._langfuse = Langfuse()  # Create the Langfuse session
            assert cls._langfuse.auth_check()  # Verify Langfuse configuration
        return cls._instance

    def get_session(self) -> Langfuse:
        return self._langfuse

    def save_custom_scores(
        self,
        trace_name: str,
        model_name: str,
        model_parameters: dict[str, Any],
        input_data: str,
        output_data: dict[str, Any],
        custom_scores: dict[str, Any],
        session_id: str,
    ) -> None:
        """
        Save custom scores for a specific LLM execution trace.

        Parameters
        ----------
        trace_name : str
            The name of the trace representing the LLM execution.
        model_name : str
            The name of the model used in the execution.
        model_parameters : dict
            Parameters of the model used in the execution.
        input_data : str
            The input data provided to the model.
        output_data : dict
            The output data generated by the model.
        custom_scores : dict
            A dictionary of custom scores to associate with the trace.
            Keys are score names, and values are their respective values.
        session_id : str
            The session ID associated with the trace.

        Returns
        -------
        None
            This method does not return any value. It saves the trace and
            associated scores using the Langfuse library.
        """
        # A Trace represents a single execution of a LLM feature
        trace = self._langfuse.trace(
            name=trace_name,
            metadata={
                "model_name": model_name,
                "model_parameters": model_parameters,
            },
            input=input_data,
            output=output_data,
            session_id=session_id,
        )
        for key, value in custom_scores.items():
            trace.score(name=key, value=value)

    @staticmethod
    def create_callback_handler(session_id: str) -> CallbackHandler:
        """
        Create and return a CallbackHandler instance configured with environment
        variables and a session ID.

        Parameters
        ----------
        session_id : str
            The unique identifier for the session.

        Returns
        -------
        CallbackHandler
            An instance of CallbackHandler initialized with the provided session
            ID and environment variables.
        """
        handler = CallbackHandler(
            secret_key=os.getenv("LANGFUSE_SECRET_KEY"),
            public_key=os.getenv("LANGFUSE_PUBLIC_KEY"),
            host=os.getenv("LANGFUSE_HOST"),
            session_id=session_id,
        )
        assert handler.auth_check()
        return handler

    @staticmethod
    def save_trace_langfuse(
        data: dict[str, Any],
        trace_name: str,
        model_name: str,
        parameters: Dict[str, Any],
        prompt: str,
        scores: Dict[str, Any],
        session_id: str = "",
    ) -> None:
        """
        Finalizes the process by recording trace.

        Parameters
        ----------
        data : dict
            The data to be saved in the file.
        trace_name : str
            The name of the trace for score recording.
        model_name : str
            The name of the model used in the process.
        parameters : dict
            The parameters of the model.
        prompt : str
            The input prompt used for the model.
        scores : dict
            The custom scores to be recorded.
        session_id : str, optional
            The session ID for tracking, by default an empty string.

        Returns
        -------
        None
            This function does not return any value.

        Notes
        -----
        - The data is saved in JSON format with UTF-8 encoding.
        - Custom scores are recorded using the LangfuseUtils utility.
        """
        # Save score in Langfuse
        utils = LangfuseUtils()
        utils.save_custom_scores(
            trace_name=trace_name,
            model_name=model_name,
            model_parameters=parameters,
            input_data=prompt,
            output_data=data,
            custom_scores=scores,
            session_id=session_id,
        )
